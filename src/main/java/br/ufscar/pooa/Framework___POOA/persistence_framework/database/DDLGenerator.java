package br.ufscar.pooa.Framework___POOA.persistence_framework.database;


import br.ufscar.pooa.Framework___POOA.persistence_framework.annotation.Column;
import br.ufscar.pooa.Framework___POOA.persistence_framework.annotation.Id;

import java.lang.reflect.Field;
import java.util.List;
import java.util.stream.Collectors;

public class DDLGenerator {

    public String generateCreateTableSQL(String tableName, List<Field> columns) {
        String safeTableName = tableName.replaceAll("[^a-zA-Z0-9_]", "_");
        if (safeTableName.isEmpty()) {
            throw new IllegalArgumentException("Invalid table name: " + tableName);
        }

        String columnDefinitions = columns.stream()
                .map(this::getColumnDefinition)
                .collect(Collectors.joining(",\n    "));

        return String.format("""
                CREATE TABLE IF NOT EXISTS "%s" (
                    %s
                );
                """, safeTableName, columnDefinitions);
    }

    private String getColumnDefinition(Field field) {
        Column column = field.getAnnotation(Column.class);

        String columnName = column.name();
        String dataType = PostgreSQLTypeMapper.getPostgreSQLType(field);

        columnName = columnName.concat(" ").concat(dataType);

        if (field.isAnnotationPresent(Id.class)) {
            return columnName.concat(" GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY");
        }

        return columnName;
    }

}

